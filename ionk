-- DeltaPackSystem (ModuleScript in ReplicatedStorage)
local M = {}

-- === CONFIG ===
M.DEFAULT_PACKS = 10
M.CARDS_PER_PACK = 5
M.PREVIEW_TTL = 20  -- seconds
M.CardPool = {
    Common = {"C1", "C2", "C3", "C4", "C5"},
    Rare = {"R1", "R2", "R3"},
    Epic = {"E1", "E2"},
    Legendary = {"L1"}
}
M.Weights = {Common=0.78, Rare=0.18, Epic=0.035, Legendary=0.005}

-- === SERVER LOGIC ===
function M.InitServer()
    local Players = game:GetService("Players")
    local RS = game:GetService("ReplicatedStorage")

    local evPreview = Instance.new("RemoteEvent")
    evPreview.Name = "Delta_RequestPreview"
    evPreview.Parent = RS

    local evResults = Instance.new("RemoteEvent")
    evResults.Name = "Delta_ReceivePreview"
    evResults.Parent = RS

    local evDecision = Instance.new("RemoteEvent")
    evDecision.Name = "Delta_DecidePreview"
    evDecision.Parent = RS

    local evInv = Instance.new("RemoteEvent")
    evInv.Name = "Delta_InventoryUpdate"
    evInv.Parent = RS

    local playerData = {}

    local function pickWeighted(weights)
        local r, acc = math.random(), 0
        for rarity, w in pairs(weights) do
            acc += w
            if r <= acc then return rarity end
        end
        return "Common"
    end

    local function generatePreview(userId)
        local data = playerData[userId]
        if data.packs <= 0 then return nil end
        local pulls = {}
        for _=1,M.CARDS_PER_PACK do
            local rarity = pickWeighted(M.Weights)
            local pool = M.CardPool[rarity]
            local card = pool[math.random(1, #pool)]
            table.insert(pulls, {rarity=rarity, card=card})
        end
        return pulls
    end

    local function sendInventory(plr)
        local snap = {}
        for id,count in pairs(playerData[plr.UserId].cards) do
            table.insert(snap, {id=id, count=count})
        end
        evInv:FireClient(plr, {packs=playerData[plr.UserId].packs, cards=snap})
    end

    Players.PlayerAdded:Connect(function(plr)
        playerData[plr.UserId] = {packs=M.DEFAULT_PACKS, cards={}}
        sendInventory(plr)
    end)

    evPreview.OnServerEvent:Connect(function(plr)
        local pulls = generatePreview(plr.UserId)
        if not pulls then return end
        evResults:FireClient(plr, {results=pulls, expiresIn=M.PREVIEW_TTL})
    end)

    evDecision.OnServerEvent:Connect(function(plr, payload)
        if payload.decision=="commit" then
            local data = playerData[plr.UserId]
            if data.packs <= 0 then return end
            data.packs -= 1
            for _,pull in ipairs(payload.results) do
                data.cards[pull.card] = (data.cards[pull.card] or 0) + 1
            end
            sendInventory(plr)
        else
            sendInventory(plr)
        end
    end)
end

-- === CLIENT LOGIC ===
function M.InitClient()
    local Players = game:GetService("Players")
    local RS = game:GetService("ReplicatedStorage")
    local plr = Players.LocalPlayer

    local evPreview = RS:WaitForChild("Delta_RequestPreview")
    local evResults = RS:WaitForChild("Delta_ReceivePreview")
    local evDecision = RS:WaitForChild("Delta_DecidePreview")
    local evInv = RS:WaitForChild("Delta_InventoryUpdate")

    local gui = Instance.new("ScreenGui")
    gui.Name = "DeltaUI"
    gui.Parent = plr:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.fromScale(0.4, 0.3)
    frame.Position = UDim2.fromScale(0.3, 0.35)
    frame.BackgroundColor3 = Color3.fromRGB(30,30,40)
    frame.Parent = gui

    local btnPrev = Instance.new("TextButton")
    btnPrev.Size = UDim2.fromScale(0.5, 0.2)
    btnPrev.Position = UDim2.fromScale(0.25, 0.1)
    btnPrev.Text = "Preview Pack"
    btnPrev.Parent = frame

    local btnCommit = Instance.new("TextButton")
    btnCommit.Size = UDim2.fromScale(0.5, 0.2)
    btnCommit.Position = UDim2.fromScale(0.25, 0.35)
    btnCommit.Text = "Commit"
    btnCommit.Visible = false
    btnCommit.Parent = frame

    local btnCancel = Instance.new("TextButton")
    btnCancel.Size = UDim2.fromScale(0.5, 0.2)
    btnCancel.Position = UDim2.fromScale(0.25, 0.6)
    btnCancel.Text = "Cancel"
    btnCancel.Visible = false
    btnCancel.Parent = frame

    local previewResults = nil

    evInv.OnClientEvent:Connect(function(snap)
        print("Packs:", snap.packs)
    end)

    evResults.OnClientEvent:Connect(function(payload)
        previewResults = payload.results
        btnCommit.Visible = true
        btnCancel.Visible = true
        print("Preview:", payload.results)
    end)

    btnPrev.MouseButton1Click:Connect(function()
        evPreview:FireServer()
    end)

    btnCommit.MouseButton1Click:Connect(function()
        evDecision:FireServer({decision="commit", results=previewResults})
        btnCommit.Visible = false
        btnCancel.Visible = false
    end)

    btnCancel.MouseButton1Click:Connect(function()
        evDecision:FireServer({decision="cancel", results=previewResults})
        btnCommit.Visible = false
        btnCancel.Visible = false
    end)
end

return M
